<?php

/**
 * @file
 * os2web_email_notifications
 *
 * PHP version 5
 *
 * @category OS2Web
 * @package  OS2Web_Email_Notifications
 * @author   Stanislav Kutasevits <stan@bellcom.dk>
 * @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link     http://bellcom.dk
 */

/**
 * Implements hook_menu().
 */
function os2web_email_notifications_menu() {
  $items = array();

  $items['kommunen/politik/abonner-pa-dagsordener'] = array(
    'title' => 'Abonner på dagsordener',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_email_notifications_page',
    'access arguments' => array('access content'),
  );

  $items['kommunen/politik/abonner-pa-dagsordener/konfirmer/%/%'] = array(
    'title' => 'Konfirmer abonnement',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_email_notifications_confirm',
    'page arguments' => array(4, 5),
    'access arguments' => array('access content'),
  );

  $items['kommunen/politik/abonner-pa-dagsordener/afmeld/%/%/%'] = array(
    'title' => 'Konfirmer abonnement',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_email_notifications_unsubscribe',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('access content'),
  );

  $items['kommunen/politik/abonner-pa-dagsordener/afmeld/%/%'] = array(
    'title' => 'Afmeld abonnement',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_email_notifications_unsubscribe_all',
    'page arguments' => array(4, 5),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Add configuration to the settings form.
 */
function os2web_email_notifications_form_os2web_settings_settings_form_alter(&$form, &$form_state) {
  $form['os2web_email_notifications'] = array(
    '#type' => 'fieldset',
    '#title' => t('OS2Web email notifications settings'),
    '#description' => t('Settings to configure the behaviour of OS2Web email notifications'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['os2web_email_notifications']['os2web_email_notifications_conf'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate confirmation mechanism'),
    '#description' => t('If active, user will first get an email, which he has to confirm in order to receive the notifications.'),
    '#default_value' => variable_get('os2web_email_notifications_conf', FALSE),
  );

  //confirmation email fieldset
  $form['os2web_email_notifications']['confirmation_fs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Confirmation email configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['os2web_email_notifications']['confirmation_fs']['os2web_email_notifications_conf_email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirmation email subject'),
    '#description' => t('Available variables can be used here'),
    '#default_value' => variable_get('os2web_email_notifications_conf_email_subject', 'Subscription confirmation'),
  );
  $form['os2web_email_notifications']['confirmation_fs']['os2web_email_notifications_conf_email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Confirmation email body'),
    '#description' => t('Accepts HTML, available variables can be used here'),
    '#default_value' => variable_get('os2web_email_notifications_conf_email_body', 'Your email has been subscribed to the notifications from the following committees:' . PHP_EOL
      . '!committe_list' . PHP_EOL . PHP_EOL
      . 'In order to confirm your email address please click on link below or copy it to your browser:' . PHP_EOL . PHP_EOL
      . '<a href="!conf_link">!conf_link</a>'),
  );
  $form['os2web_email_notifications']['confirmation_fs'][] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#value' => 'Can be used both in subject and body:<br/>
    <b>!committe_list</b> - list of the committees, which user has subscribed to formated as <b><i>ul li</i></b><br/>
    <b>!conf_link</b> - the http://... link for confirming the subscription<br/>',
    '#title' => t('Available variables'),
  );

  //notification email fieldset
  $form['os2web_email_notifications']['notification_fs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Notification email configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['os2web_email_notifications']['notification_fs']['os2web_email_notifications_notif_email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Notification email subject'),
    '#description' => t('Available variables can be used here'),
    '#default_value' => variable_get('os2web_email_notifications_notif_email_subject', '!meeting_type til !committee er publiceret'),
  );
  $form['os2web_email_notifications']['notification_fs']['os2web_email_notifications_notif_email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Notification email body'),
    '#description' => t('Accepts HTML, available variables can be used here'),
    '#default_value' => variable_get('os2web_email_notifications_notif_email_body', 'Du abonnerer på !committee.' . PHP_EOL
      . 'Der er publiceret !meeting_type til !meeting_name !meeting_date.' . PHP_EOL . PHP_EOL
      . 'Du kan afmelde sig fra <a href="!unsub_link">denne udvalg</a> eller fra <a href="!unsub_all_link">alle udvalger</a>.'),
  );
  $form['os2web_email_notifications']['notification_fs'][] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#value' => 'Can be used both in subject and body:<br/>
    <b>!committe</b> - name of the committee<br/>
    <b>!meeting_name</b> - title of the meeting<br/>
    <b>!meeting_date</b> - date of the meeting<br/>
    <b>!meeting_type</b> - type of the meeting with acticle: <i>et referat</i> or <i>en dagsorden</i><br/>
    <b>!unsub_link</b> - link to unsubscribe from the notification of that committee<br/>
    <b>!unsub_all_link</b> - link to unsubscribe from the notification of all committees<br/>',
    '#title' => t('Available variables'),
  );

}

/**
 * Implements Page callback
 *
 * @return array
 */
function os2web_email_notifications_page() {
  return drupal_get_form('os2web_email_notifications_form');
}

/**
 * Generates notification email subscription form
 *
 * @param $form       mixed the form
 * @param $form_state mixed the state of the form
 *
 * @return form
 */
function os2web_email_notifications_form($form, $form_state) {
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Your email:'),
    '#size' => 30,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $committees = taxonomy_vocabulary_machine_name_load('os2web_meetings_tax_committee');
  $committee_terms = taxonomy_get_tree($committees->vid);

  $commitee_select = array();
  foreach ($committee_terms as $term) {
    $term = taxonomy_term_load($term->tid);
    $commitee_select[$term->tid] = $term->name;
  }
  $form['committees'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Committees:'),
    '#options' => $commitee_select,
    '#size' => 10,
  );

  $form[] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
    '#validate' => array('os2web_email_notifications_form_validate'),
    '#submit' => array('os2web_email_notifications_form_submit'),
  );

  return $form;
}

/**
 * Validation for notification email subscription form. Checks if the email is correct
 *
 * @param $form       mixed the form
 * @param $form_state mixed state of the form
 *
 * @return none
 */
function os2web_email_notifications_form_validate($form, $form_state) {
  if (!filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
    form_set_error('email', t('You must provide a valid email address'));
  }
}


/**
 * Submit for notification email subscription form. Add the entries to the database
 *
 * @param $form       mixed the form
 * @param $form_state mixed state of the form
 *
 * @return none
 */
function os2web_email_notifications_form_submit($form, $form_state) {
  //input extraction
  extract($form_state['input']);

  $committees = array_filter($committees);
  $token = _os2web_email_notifications_random_token();
  $committee_names_arr = array();

  //if there are new committees added to that email - no confirm is needed
  $confirm_needed = FALSE;

  foreach ($committees as $tid) {
    //check if this committee is already associated with the user
    $query = db_select('os2web_email_notifications', 'en');
    $query->fields('en')
      ->condition('committee_tid', $tid)
      ->condition('email', $email);
    $result = $query->execute();

    //if not added, then add it
    if (!$result->rowCount()) {
      db_insert('os2web_email_notifications')
        ->fields(array(
          'email' => $email,
          'committee_tid' => $tid,
          'status' => variable_get('os2web_email_notifications_conf', FALSE) ? 0 : 1,
        ))
        ->execute();

      $confirm_needed = TRUE;
    }

    //save committee name
    $committee_names_arr[] = taxonomy_term_load($tid)->name;
  }

  //update the token of entries connected with this email
  db_update('os2web_email_notifications')
    ->fields(array(
      'token' => $token,
    ))
    ->condition('email', $email, '=')
    ->execute();

  if ($confirm_needed && variable_get('os2web_email_notifications_conf', FALSE)) {
    _os2web_email_notifications_send_confirmation_email($email, $token, $committee_names_arr);
  }
  else {
    drupal_set_message(t('Email @email is successfully subscribed to the notifications of the following committees: <br/>@committees', array(
      '@email' => $email,
      '@committees' => implode(", ", $committee_names_arr)
    )));
  }
}

/**
 * Helper function to send confirmation email to the user
 *
 * @param $email
 * @param $token
 * @param $committee_names
 */
function _os2web_email_notifications_send_confirmation_email($email, $token, $committee_names) {
  //send confirmation email
  $subject_template = variable_get('os2web_email_notifications_conf_email_subject', 'Subscription confirmation');
  $body_template = variable_get('os2web_email_notifications_conf_email_body', 'Your email has been subscribed to the notifications from the following committees:' . PHP_EOL
    . '!committe_list' . PHP_EOL . PHP_EOL
    . 'In order to confirm your email address please click on link below or copy it to your browser:' . PHP_EOL . PHP_EOL
    . '<a href="!conf_link">!conf_link</a>');
  $confirmation_link_template = $GLOBALS['base_url'] . "/kommunen/politik/abonner-pa-dagsordener/konfirmer/{$email}/{$token}";
  $committee_list_tempalte = '<ul><li>' . implode('<li>', $committee_names) . '</ul>';

  //composing search/replace
  $search = array('!committe_list', '!conf_link', PHP_EOL);
  $replace = array($committee_list_tempalte, $confirmation_link_template, '<br/>');

  //making replacements
  $subject = str_replace($search, $replace, $subject_template);
  $subject = ucfirst($subject);
  $body = str_replace($search, $replace, $body_template);
  $body = ucfirst($body);

  _os2web_email_notifications_send_email($email, $subject, $body);

  drupal_set_message(t('The confirmation mail has been send to @email', array('@email' => $email)));
}

/**
 * Hook to node_presave
 * The function will send the notifications the the email, which are subscribed to the notifications of that committees.
 *
 * @param $node   mixed  meeting node to be saved
 *
 * @return $node meeting
 */
function os2web_email_notifications_node_presave($node) {
  if ($node->type === 'os2web_meetings_meeting') {
    $status = $node->field_os2web_meetings_type['und'][0]['value'];
    if (strcasecmp($status, 'Dagsorden') == 0 || strcasecmp($status, 'Referat') == 0) {
      $committee_tid = $node->field_os2web_meetings_committee['und'][0]['tid'];

      $cName = taxonomy_term_load($committee_tid)->name;
      $mName = check_plain($node->title);
      $mDate = check_plain($node->field_os2web_meetings_date['und'][0]['value']);
      $published_item = (strcasecmp($status, 'Dagsorden') == 0) ? 'en dagsorden' : 'et referat';

      //getting subject and body
      $subject_template = variable_get('os2web_email_notifications_notif_email_subject', '!meeting_type til !committee er publiceret');
      $body_template = variable_get('os2web_email_notifications_notif_email_body', 'Du abonnerer på !committee.' . PHP_EOL
        . 'Der er publiceret !meeting_type til !meeting_name !meeting_date.' . PHP_EOL . PHP_EOL
        . 'Du kan afmelde sig fra <a href="!unsub_link">denne udvalg</a> eller fra <a href="!unsub_all_link">alle udvalger</a>.');

      //composing search/replace
      $search = array('!committee', '!meeting_name', '!meeting_date', '!meeting_type', PHP_EOL);
      $replace = array($cName, $mName, $mDate, $published_item, '<br/>');

      //making general replacements
      $subject = str_replace($search, $replace, $subject_template);
      $subject = ucfirst($subject);
      $body = str_replace($search, $replace, $body_template);
      $body = ucfirst($body);

      $query = db_select('os2web_email_notifications', 'en');
      $query->fields('en')
        ->condition('committee_tid', $committee_tid)
        ->condition('status', 1);
      $result = $query->execute();

      while ($record = $result->fetchAssoc()) {
        $link_unsubscribe_this_com = $GLOBALS['base_url'] . "/kommunen/politik/abonner-pa-dagsordener/afmeld/{$record['email']}/{$record['token']}/{$committee_tid}";
        $link_unsubscribe_all_com = $GLOBALS['base_url'] . "/kommunen/politik/abonner-pa-dagsordener/afmeld/{$record['email']}/{$record['token']}";

        //replacing the links
        $body = str_replace(array(
          '!unsub_link',
          '!unsub_all_link'
        ), array(
          $link_unsubscribe_this_com,
          $link_unsubscribe_all_com
        ), $body);

        _os2web_email_notifications_send_email($record['email'], $subject, $body);
      }
    }
  }
  return $node;
}

/**
 * Callback function to accept user confirmation
 *
 * @param $email
 * @param $token
 */
function os2web_email_notifications_confirm($email, $token) {
  $num_updated = db_update('os2web_email_notifications')
    ->fields(array(
      'status' => 1,
    ))
    ->condition('email', $email, '=')
    ->condition('token', $token, '=')
    ->execute();

  if ($num_updated) {
    drupal_set_message(t("Your subscription is confirmed"));
    return '';
  }
  else {
    drupal_goto();
  }
}

/**
 * Callback function to unsubscribe user from all committee notifications
 *
 * @param $email
 * @param $token
 */
function os2web_email_notifications_unsubscribe_all($email, $token) {
  $num_deleted = db_delete('os2web_email_notifications')
    ->condition('email', $email)
    ->condition('token', $token)
    ->execute();

  if ($num_deleted) {
    drupal_set_message(t("You have successfully unsubscribed from all committees"));
    return '';
  }
  else {
    drupal_goto();
  }
}

/**
 * Callback function to unsubscribe user from single committee notifications
 *
 * @param $email
 * @param $token
 * @param $tid
 */
function os2web_email_notifications_unsubscribe($email, $token, $tid) {
  $num_deleted = db_delete('os2web_email_notifications')
    ->condition('email', $email)
    ->condition('token', $token)
    ->condition('committee_tid', $tid)
    ->execute();

  if ($num_deleted) {
    drupal_set_message(t("You have successfully unsubscribed from @committee committee", array('@committee' => taxonomy_term_load($tid)->name)));
    return '';
  }
  else {
    drupal_goto();
  }
}

/**
 * Helper function that sends the email.
 *
 * @param $to
 * @param $subject
 * @param $body
 */
function _os2web_email_notifications_send_email($to, $subject, $body) {
  $from = variable_get('system_mail');
  $message = array(
    'to' => $to,
    'subject' => $subject,
    'body' => $body,
    'headers' => array(
      'MIME-Version' => '1.0',
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
      'Content-Type' => 'text/html;charset=utf-8',
    ),
  );
  $system = drupal_mail_system("os2web_email_notifications", "");

  $system->mail($message);
}

/**
 * Function that generates the random token
 *
 * @return string
 */
function _os2web_email_notifications_random_token() {
  return rtrim(base64_encode(md5(microtime())), "=");
}